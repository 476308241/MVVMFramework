//module名称
String module = project.path.replace(":", "")
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

def keystorePropertiesFile = rootProject.file("././sign/keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    // 配置签名信息
    signingConfigs {
        debug {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }
    defaultConfig {

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // 配置默认签名
        signingConfig signingConfigs.release
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            // 代码压缩
            //minifyEnabled true
            // 资源压缩
            //shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures{
        dataBinding = true
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
    sourceSets {
        main {
            //单独运行的module需要在这里配置
            if ((module=="module-search"||module=="module-jetpack"
                    ||module=="module-chat"||module=="module-task")&&isRunModule.toBoolean()){
                manifest.srcFile 'src/main/runAlone/AndroidManifest.xml'
            }else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }
}

dependencies {
    //dagger:hilt
    api "com.google.dagger:hilt-android:$daggerHiltVersion"
    kapt "com.google.dagger:hilt-android-compiler:$daggerHiltVersion"
    api 'androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha02'
    kapt 'androidx.hilt:hilt-compiler:1.0.0-alpha02'
    //arouter
    api "com.alibaba:arouter-api:$arouterApi"
    kapt "com.alibaba:arouter-compiler:$arouterCompiler"
}
